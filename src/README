erez.levanon




=============================
=      File description     =
=============================
README 			this file
QUESTIONS 		answers to multiple selection questions

filters							- package
	FilterFactory				- produce Filter objects
	Filter						- interface
		SizeLimitationFilter	- abstract class
			GreaterFilter		- pass files greater than given size.
			SmallerFilter		- pass files smaller than given size.
			BetweenFilter		- pass files between two given sizes.
		FileNameRelatedFilter 	- abstract class
			FileNameFilter		- pass files with exact name
			PrefixFilter		- pass files beginning with given string
			ContainsFilter		- pass files containing a given string
			SuffixFilter		- pass files ending with a given string
		PremissionFilter		- abstract class
			WritableFilter		- pass writable files
			ExecutableFilter	- pass executable files
			HiddenFilter		- pass hidden files.
		NegFilter				- Filter decorator, returns opposite.
		FilterAll				- pass all files.
	filters.exceptions			- sub-package
		FilterException			- abstract class extends Exception. (TYPE 1)
			IllegalArg			- illegal arguments
			UnexistingFilter	- wrong filter name
			WrongNumberOfArgs	- wrong number of arguments.
orders							- package
	OrderFactory				- produce Order objects.
	Order						- interface - implements Comparator<File>
		AbsPathOrder			- order by absolute path name
		SizeOrder				- order by file size.
		TypeOrder				- order by file type alphabetically
		RevOrder				- a decorator, return original value times -1.
	orders.exceptions			- sub-package
		OrderException			- abstract class extends Exception (TYPE 1)
		UnexistingOrder			- wrong order name
		WrongNumberOfArgs		- wrong number of arguments.
parsing							- package
	Parser						- parse the command file
	parsing.exceptions			- sub.package
		ParserException			- implements Exception. format issue (TYPE 2 ERROR).
sections						- package
	Section						- represent a section of the command file.
		



=============================
=          Design           =
=============================
same as the one shown in class.

=============================
=  Implementation details   =
=============================


=============================
=    Answers to questions   =
=============================
1. in the design segment

2. Exception hirarchy (extends relationships) 

java.utils.Exception
	FilterException
		IllegalArgFilterException
		UnexistingFilterException
		WrongNumberOfArgumentsException
	OrderException
		UnexistingOrderException
		WrongNumberOfArgsOrder
	ParserExcetpion
	
filter and order exceptions are type1 errors, parser exception is type2 error.
i did so to allow modularity and different dealing with different kinds of exceptions for
future changes to the program (so you could differ the treatment of order and filter exception e.g)

3. 	i used an ArrayList and the Collections.sort(Collection c, Comparator<T>) for simplicity.
	because we only need to sort the files once after filtered. the arraylist allows adding of
	neede files and the sort will sort it with O(nlogn). after sorting, printing will be linear.

.
		
