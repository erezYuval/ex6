erez.levanon




=============================
=      File description     =
=============================
README 			this file
QUESTIONS 		answers to multiple selection questions


methods                                                             - package
    Method                                                          - class representing a method
parser                                                              - package
    Parser                                                          - static class with parsing methods
    JavaSPatterns                                                   - static class with language regex patterns
scopes                                                              - package
    Scope                                                           - class representing a method
variables                                                           - package
    PREDECLERATIONS                                                 - enum, reserved words before variable declaration
    VARIABLE_TYPES                                                  - enum, reserved words of variable types
    Variable                                                        - abstract class, representing a variable
        VariableUtils                                               - static class, variable related utility methods
        VariableFactory                                             - static class, create Variable instances
        FinalVariable                                               - final decorator for a Variable instance
        VariableBoolean                                             - extends Variable
        VariableChar                                                - extends Variable
        VariableDouble                                              - extends Variable
        VariableInteger                                             - extends Variable
        VariableString                                              - extends Variable
main 									                            - package
        Sjavac                                                      - this is where the
    -   exceptions                                                  - sub package
            SjavaException                                          - abstract class
            method_exceptions                                       - sub package
                MethodException                                     - abstract class, implements SjavaException
                    IllegalArgumentNameException                    - implements Method Exception
                    IllegalArgumentTypeException                    - implements Method Exception
                    IllegalArgumentValueException                   - implements Method Exception
                    IllegalMethodNameException                      - implements Method Exception
                    NonExistingMethodException                      - implements Method Exception
                    WrongArgumentNumberException                    - implements Method Exception
            parser_exceptions                                       - sub package
                IllegalLineException                                - implements SjavaException
                ReturnStatementInGlobalScopeException               - implements SjavaException
                UnbalancedScopeException                            - implements SjavaException
                UnexpectedExpressionAfterReturnException            - implements SjavaException
            scope_exceptions                                        - sub package
                ScopeException                                      - abstract class, implements SjavaException
                    NonexistingVariableException                    - implements ScopeException
                    VarNameExistsInBlockException                   - implements ScopeException
            variable_exceptions                                     - sup package
                VariableException                                   - abstract class, implements SjavaException
                    AssignUninitializedVariableException            - implements VariableException
                    IllegalBooleanCondition                         - implements VariableException
                    IllegalNameException                            - implements VariableException
                    MultipleAssignmentWithoutDeclarationException   - implements VariableException
                    TypeMismatchException                           - implements VariableException
                    FinalVariableException                          - abstract class, implements VariableException
                        AttemptChangeFinalVarException              - implements FinalVariableException
                        DeclaredFinalVarWithoutInitialization       - implements FinalVariableException



		



=============================
=          Design           =
=============================

=============================
=  Implementation details   =s
=============================

=============================
=    Answers to questions   =
=============================

6.1
    in the implementation details section above ^ .

6.2
design - in the design area above ^ .

implementing additional functionality -

    importing the methods and global variables of one s-java file to an other:
        this will be very simple.
        first we will create a scope to be our file's global scope.
        while parsing a file's global scope we will check for import command -

        if the import command is directing to a reachable java-s file:
            we will create a new scope
            we will use parseGlobalScope method from our Parser class with the newly created scope.
            the parser will add the methods and global variables to that scope.
            we will set our global scope parent to be the newly created scope. (recursively upward if there are
                                                                                several imports)
            continue parsing our file normally.

        because all the variable and methods are being searched recursively upwards to parent scopes during the parser
        run, this procedure will make sure they are all reachable and recognizable for this file.

    switch statement:
        after dealing with the regex involved, the switch statement mechanism will be pretty simple too.
        first we we'll check the type of the expression inside the switch statement parenthesis ( "(XXXX)" )
        then we will continue with the scanner nextLine method. every time a line will match "case: YYYY"
        we will start a new scope, that the current scope is it's parent scope and that YYYY is a constant value
        or a final variable, and try to set it for the variable type of XXXX. then we keep going through the code.
        when we find a new case expression, we we'll go back to the parent scope, and start a new scope again
        the same way until leaving the switch scope (ends with a '}').
        every thing that may happen wrongly inside the case statements or the inner scope will throw an exception that
        we will catch.




6.3
    we used the expression:
        ((-?\w+(\.\d+)?)|("[^"]*")|(\'[^']*\'))
    for any word that can be a value or an argument in a method call, an assignment, or a boolean condition.
    we used a while(matcher.find()) mechanism to get all of these from one line one by one.

    a second expression we use is:
        [^\)\(]*\(([^\)\(]*)\)[^\)\(]*
    that we used in method declaration or boolean condition blocks to get only the part inside the parenthesis
    with
    if(matcher.matches) { String insideParenthesis = matcher.group() }
