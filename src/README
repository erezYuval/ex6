erez.levanon
yuval.avrami


=============================
=      File description     =
=============================
README 			this file
QUESTIONS 		answers to multiple selection questions


methods                                                             - package
    Method                                                          - class representing a method
parser                                                              - package
    Parser                                                          - static class with parsing methods
    JavaSPatterns                                                   - static class with language regex patterns
scopes                                                              - package
    Scope                                                           - class representing a method
variables                                                           - package
    PREDECLERATIONS                                                 - enum, reserved words before variable declaration
    VARIABLE_TYPES                                                  - enum, reserved words of variable types
    Variable                                                        - abstract class, representing a variable
        VariableUtils                                               - static class, variable related utility methods
        VariableFactory                                             - static class, create Variable instances
        FinalVariable                                               - final decorator for a Variable instance
        VariableBoolean                                             - extends Variable
        VariableChar                                                - extends Variable
        VariableDouble                                              - extends Variable
        VariableInteger                                             - extends Variable
        VariableString                                              - extends Variable
main 									                            - package
        Sjavac                                                      - this is where the
    -   exceptions                                                  - sub package
            SjavaException                                          - abstract class
            method_exceptions                                       - sub package
                MethodException                                     - abstract class, implements SjavaException
                    IllegalArgumentNameException                    - implements Method Exception
                    IllegalArgumentTypeException                    - implements Method Exception
                    IllegalArgumentValueException                   - implements Method Exception
                    IllegalMethodNameException                      - implements Method Exception
                    NonExistingMethodException                      - implements Method Exception
                    WrongArgumentNumberException                    - implements Method Exception
            parser_exceptions                                       - sub package
                IllegalLineException                                - implements SjavaException
                ReturnStatementInGlobalScopeException               - implements SjavaException
                UnbalancedScopeException                            - implements SjavaException
                UnexpectedExpressionAfterReturnException            - implements SjavaException
            scope_exceptions                                        - sub package
                ScopeException                                      - abstract class, implements SjavaException
                    NonexistingVariableException                    - implements ScopeException
                    VarNameExistsInBlockException                   - implements ScopeException
            variable_exceptions                                     - sup package
                VariableException                                   - abstract class, implements SjavaException
                    AssignUninitializedVariableException            - implements VariableException
                    IllegalBooleanCondition                         - implements VariableException
                    IllegalNameException                            - implements VariableException
                    MultipleAssignmentWithoutDeclarationException   - implements VariableException
                    TypeMismatchException                           - implements VariableException
                    FinalVariableException                          - abstract class, implements VariableException
                        AttemptChangeFinalVarException              - implements FinalVariableException
                        DeclaredFinalVarWithoutInitialization       - implements FinalVariableException

=============================
=          Design           =
=============================
Our design is based on having a class representing each component of the language - variable, method,
and scope; and a parser that runs on the code and attempts to execute the described actions, as well as
catching the last component - exceptions.
each component is in a different package, and only â€?knowsâ€? about itself, i.e. a variable knows what
a legal variable name is, so a scope doesnâ€™t need to know if the variables it holds are legal as the
variable class already checks that.

The variable package holds classes for each type of variable (to know what legal values and other variables
that specific type can accept during assignment), as well as a variableUtils class that holds static methods
that are shared by all classes in the package; a factory class; an enum class holding the various variable
types;  and 2 classes that comprise the â€?finalâ€? decorator for the class:
a. finalVariable - the actual decorator for a final variable
b. PREDECLARATIONS - a class that holds the various expressions that can precede a variable (at the moment
the only one it holds is â€?finalâ€?, but we decided to create the class for extensibility reasons, for future
possible expressions).

The method package holds the method class, that represents each method in the code.

The scope package holds the scope class, representing the different scopes in the code. Each scope holds the
variables and methods it knows, and knows to search them and in parent classes, to determine if an assignment
or method call is legal.

The parser package holds the SJavaPatterns class, that holds the regular expressions we used,
and the parser itself - that goes over the code and attempts executing actions by calling the respective
classes and their methods.

The main package holds the main method of the S-Java verifier - that tries parsing the files, using our parsing
methods in our parsing class, and catches exceptions should they arise;
and a sub-package - exceptions - that holds all possible exceptions, divided into sub-packages, not unlike
the division of the main packages (by different components of the language). we decided to put all exceptions
in the same package (and not each exception type in its componentâ€™s package) so we can have a mutual parent
to all exceptions,and then trying catching that parent-exception catches all of its inheriting children.

One of the design ideas we considered but later dismissed was extensively using the line number as a data
member in our code, that will be used in discerning the different scopes, and the actions on them (looking
for variables, searching for expressions in a scope after the last return statement etc).
We decided to dismiss this tactic and simply go over the code, throwing exceptions once illegal code is found,
keeping track of the current scope with a bracket-balancing mechanism.
The line numbers are eventually used only in the error messages for a more informative description of where
in the code the error happened, and do not serve a real purpose.


=============================
=  Implementation details   =s
=============================
Error handling:
We decided not to use boolean methods that return a true/false value that correspond to whether
the code is legal or not, but rather run on the given text, try executing the described actions(i.e
declaring methods, calling methods, assigning variables etc), mainly with void methods, and throw
respective exceptions the moment we reach them.
   This way we (a) make use of the exceptions mechanism, (b) react to illegal code the moment it is met,
and (c) gather information about why the exception happened (e.g what was the illegal value that caused
it, in what line did it happen) to use while printing the error message to the user.

=============================
=    Answers to questions   =
=============================

6.1
    in the implementation details section above ^ .

6.2
design - in the design area above ^ .

implementing additional functionality -

    importing the methods and global variables of one s-java file to an other:
        this will be very simple.
        first we will create a scope to be our file's global scope.
        while parsing a file's global scope we will check for import command -

        if the import command is directing to a reachable java-s file:
            we will create a new scope
            we will use parseGlobalScope method from our Parser class with the newly created scope.
            the parser will add the methods and global variables to that scope.
            we will set our global scope parent to be the newly created scope. (recursively upward if there are
                                                                                several imports)
            continue parsing our file normally.

        because all the variable and methods are being searched recursively upwards to parent scopes during the parser
        run, this procedure will make sure they are all reachable and recognizable for this file.

    switch statement:
        after dealing with the regex involved, the switch statement mechanism will be pretty simple too.
        first we we'll check the type of the expression inside the switch statement parenthesis ( "(XXXX)" )
        then we will continue with the scanner nextLine method. every time a line will match "case: YYYY"
        we will start a new scope, that the current scope is it's parent scope and that YYYY is a constant value
        or a final variable, and try to set it for the variable type of XXXX. then we keep going through the code.
        when we find a new case expression, we we'll go back to the parent scope, and start a new scope again
        the same way until leaving the switch scope (ends with a '}').
        every thing that may happen wrongly inside the case statements or the inner scope will throw an exception that
        we will catch.




6.3
    we used the expression:
        ((-?\w+(\.\d+)?)|("[^"]*")|(\'[^']*\'))
    for any word that can be a value or an argument in a method call, an assignment, or a boolean condition.
    we used a while(matcher.find()) mechanism to get all of these from one line one by one.

    a second expression we use is:
        [^\)\(]*\(([^\)\(]*)\)[^\)\(]*
    that we used in method declaration or boolean condition blocks to get only the part inside the parenthesis
    with
    if(matcher.matches) { String insideParenthesis = matcher.group() }
